/*
  ** @file           : dps_info.c
  ** @brief          : Get DPS Channel Information From ISL28023 Source File
  **
  ** @attention
  **
  ** Copyright (c) 2020 ChengDuHangke.
  ** All rights reserved.
  **
  ** This software is licensed by ChengDuHangke under Ultimate Liberty license
  **
*/


/*
  ** Include
*/
#include "FreeRTOS.h"
#include "task.h"
#include "lwip/sys.h"
#include "sleep.h"
#include "return_val.h"
#include "debug_config.h"
#include "GlobalRef.h"
#include "ad5694.h"
#include "fpga_ctrl.h"
#include "isl8272.h"
#include "system_state.h"
#include "dps_info.h"


/*
  **
*/
#define 	THREAD_STACKSIZE    (1024)


/*
  **
*/
static  TaskHandle_t Power_on_t;


/*
  ** Function Name        : Dps_Config
  ** Function Description : Configuration Dps Dpm system
  ** Function Parameter   : dps_cfg             : Dps configuration parameter pointer
  						    Sample              : Aging sample data pointer
                            protect             : protect enable 
  ** Function Return      : CONFIG_SUCCESS      : Config success
							CONFIG_FAILED       : Config failed
  ** Notes				  : None
*/
u8 Dps_Config(Dps_Arg * dps_cfg, Sample_Data * Sample, u8 protect)
{
	TickType_t x1ms = pdMS_TO_TICKS(1);
	u8 id = 0x00;

	if (SET_SUCCESS != Set_All_Dps_L1_Enable(L1_ALL_ENABLE, DPS_BD0)) {
		return SET_FAILED;
	}
	vTaskDelay(x1ms * 200);

	for (id = DPSA_CHANNEL; id <= DPSF_CHANNEL; id++) {
		if (id == DPSA_CHANNEL) {
			vTaskDelay(x1ms * 100);
		}

		if (SUCCESS != Isl8272_Config(id, dps_cfg, protect, DPS_BD0)) {
			if (protect) {
				Sample->AgeStatus = ERROR_PROTECT;
				Sample->ErrStatus = DPS1_SET_ERR;
				return CONFIG_FAILED;
			}
			else {

			}
		}
	}

//	/* Config DPS1 */
//	float v1 = (float)(dps_cfg->Dsp[6].SetValue / 1000.0f);
//	if (SET_SUCCESS != Set_AD5694(v1, \
//			0, DPS_AD5694_ADDR, dps_info.DBMsg[0].Chan)) {
//		if (protect) {
//			return CONFIG_FAILED;
//		}
//	}
//
//	/* Config Dps2 */
//	float v2 = (float)(dps_cfg->Dsp[7].SetValue / 1000.0f);
//	if (SET_SUCCESS != Set_AD5694(v2, \
//			1, DPS_AD5694_ADDR, dps_info.DBMsg[0].Chan)) {
//		if (protect) {
//			return CONFIG_FAILED;
//		}
//	}

	if (SET_SUCCESS != Set_All_Dps_L3_Enable(L3_ALL_ENABLE, DPS_BD0)) {
		if (protect) {
			return CONFIG_FAILED;
		}
		else {

		}
	}
	vTaskDelay(x1ms);

	if (SET_SUCCESS != Set_All_Dps_L2_Enable(L2_ALL_ENABLE, DPS_BD0)) {
		if (protect) {
			return CONFIG_FAILED;
		}
		else {

		}
	}
	vTaskDelay(x1ms);

	/* Task Function */
    xTaskCreate(AD5694_Set_Line_Power_On_Task,\
    		/* Task Name */
    		( const char * )"AD5694 Set Line Power On",\
			/* Task Stack Size */
			THREAD_STACKSIZE,	
			/* Task Parameter */
			(void *)dps_cfg,\
			/* Task Priority */
			DEFAULT_THREAD_PRIO + 4,\
			/* Task Handler */
			&Power_on_t);

	Sample->AgeStatus = AGING_DO;
	return CONFIG_SUCCESS;
}


/*
  ** Function Name        : Dps_Disable
  ** Function Description : Disable Dps Dpm system
  ** Function Parameter   : void
  ** Function Return      : SET_SUCCESS         : Disable success
							SET_FAILED          : Disable failed
  ** Notes				  : None
*/
u8 Dps_Disable(void)
{
	TickType_t x1ms = pdMS_TO_TICKS(1);

	if (SET_SUCCESS != Set_All_Dps_L2_Enable(ALL_DISABLE, DPS_BD0)) {
		return SET_FAILED;
	}
	vTaskDelay(x1ms * 700);

	if (SET_SUCCESS != Set_All_Dps_L3_Enable(ALL_DISABLE, DPS_BD0)) {
		return SET_FAILED;
	}
	vTaskDelay(x1ms);

	if (SET_SUCCESS != Set_All_Dps_L1_Enable(ALL_DISABLE, DPS_BD0)) {
		return SET_FAILED;
	}
	vTaskDelay(x1ms);

	return SET_SUCCESS;
}


/*
  ** Function Name        : Dps_Info_Clear
  ** Function Description : Clear dps information 
  ** Function Parameter   : Sample              : Aging sample data
  ** Function Return      : CLEAR_SUCCESS       : Clear success
							CLEAR_FAILED        : Clear failed
  ** Notes				  : None
*/
u8 Dps_Info_Clear(Sample_Data * Sample)
{
	u8 i = 0;
	for ( i = 0; i < 16; i ++) {
		Sample->DpsVO[i] = 0x00;
		Sample->DpsIO[i] = 0x00;
		Sample->TempSamp[i] = 0x00;
	}

	return CLEAR_SUCCESS;
}


/*
  ** Function Name        : Dps_Fpga_Init
  ** Function Description : Init fpga control dps system 
  ** Function Parameter   : void
  ** Function Return      : SET_SUCCESS         : Clear success
							SET_FAILED          : Clear failed
  ** Notes				  : None
*/
u8 Dps_Init(void)
{
	if (SUCCESS != Reset_AD5694(dps_info.AD5694_SlaveAddr, dps_info.DBMsg[0].Chan)) {
		// return SET_FAILED;
	}

//	if (SUCCESS != Reset_AD5694(dps_info.AD5694_SlaveAddr, dps_info.DBMsg[1].Chan)) {
//		return SET_FAILED;
//	}

	if (SUCCESS != Dps_Fpga_Reset(DPS_BD0)) {
		return SET_FAILED;
	}

//	if (SUCCESS != Dps_Fpga_Reset(1)) {
//		return SET_FAILED;
//	}

	return SET_SUCCESS;
}


/*
  ** Function Name        : Get_DPS_Voltage
  ** Function Description : Get DPS Channel Voltage Value
  ** Function Parameter   : Void
  ** Function Return      : float               : DPS Channel Voltage Value
  ** Notes				  : None
*/
float Get_DPS_Voltage(Dpm_Info *dpm, IIC_Chan Chan)
{
	return Dpm_VBus(dpm,Chan);
}


/*
  ** Function Name        : Get_DPS_Current
  ** Function Description : Get DPS Channel Current Value
  ** Function Parameter   : Void
  ** Function Return      : float               : DPS Channel Current Value
  ** Notes				  : None
*/
float Get_DPS_Current(Dpm_Info *dpm, IIC_Chan Chan)
{
	return Dpm_VShunt(dpm,Chan);
}


/*
  ** (C) COPYRIGHT ChengDuHangke END OF FILE
*/
