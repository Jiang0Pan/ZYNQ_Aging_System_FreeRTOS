/*
  ** @file           : dps_info.c
  ** @brief          : Get DPS Channel Information From ISL28023 Source File
  **
  ** @attention
  **
  ** Copyright (c) 2020 ChengDuHangke.
  ** All rights reserved.
  **
  ** This software is licensed by ChengDuHangke under Ultimate Liberty license
  **
*/


/*
  ** Include
*/
#include "FreeRTOS.h"
#include "task.h"
#include "lwip/sys.h"
#include "sleep.h"
#include "return_val.h"
#include "debug_config.h"
#include "GlobalRef.h"
#include "ad5694.h"
#include "fpga_ctrl.h"
#include "isl8272.h"
#include "isl28023.h"
#include "system_state.h"
#include "dps_info.h"


/*
  **
*/
/* Task stack size */
#define 	THREAD_STACKSIZE    (1024)
/* */



/*
  ** Sataic TaskHandle
*/
/* Power on task */
/* Board 0 channel 0 power on task */
static  TaskHandle_t Power_bd0_ch0_on_t;
/* Board 0 channel 1 power on task */
static  TaskHandle_t Power_bd0_ch1_on_t;
/* Board 1 channel 0 power on task */
static  TaskHandle_t Power_bd1_ch0_on_t;
/* Board 1 channel 1 power on task */
static  TaskHandle_t Power_bd1_ch1_on_t;

/* Power off task */
/* Board 0 channel 0 power off task */
static  TaskHandle_t Power_bd0_ch0_off_t;
/* Board 0 channel 1 power off task */
static  TaskHandle_t Power_bd0_ch1_off_t;
/* Board 1 channel 0 power off task */
static  TaskHandle_t Power_bd1_ch0_off_t;
/* Board 1 channel 1 power off task */
static  TaskHandle_t Power_bd1_ch1_off_t;


/*
  ** Function Name        : Dps_Init
  ** Function Description : Init fpga control dps system 
  ** Function Parameter   : void
  ** Function Return      : SET_SUCCESS         : Clear success
							SET_FAILED          : Clear failed
  ** Notes				  : None
*/
u8 Dps_Init(void)
{
	/* Reset DPS board0 fpga */
	if (SUCCESS != Dps_Fpga_Reset(DPS_BD0)) {
		return INIT_FAILED;
	}
	else {

	}

	/* Reset DPS board1 fpga */
	if (SUCCESS != Dps_Fpga_Reset(DPS_BD1)) {
		/* De_bug No Board 1 */
		// return INIT_FAILED;
	}
	else {

	}

	if (SUCCESS != Reset_AD5694(dps_info.AD5694_SlaveAddr ,dps_info.DBMsg[0].Chan)) {
		return INIT_FAILED;
	}
	else {

	}

	if (SUCCESS != Reset_AD5694(dps_info.AD5694_SlaveAddr ,dps_info.DBMsg[1].Chan)) {
		/* De_bug No Board 1 */
		// return INIT_FAILED;
	}
	else {

	}

	/* Enable DPS board0 level 1 */
	if (SET_SUCCESS != Set_All_Dps_L1_Enable(L1_ALL_ENABLE, DPS_BD0)) {
		return INIT_FAILED;
	}
	/* Enable DPS board1 level 1 */
	if (SET_SUCCESS != Set_All_Dps_L1_Enable(L1_ALL_ENABLE, DPS_BD1)) {
		/* De_bug No Board 1 */
		// return INIT_FAILED;
	}

	return INIT_SUCCESS;
}


/*
  ** Function Name        : Dps_Config
  ** Function Description : Configuration Dps Dpm system
  ** Function Parameter   : dps_cfg             : Dps configuration parameter pointer
  						    Sample              : Aging sample data pointer
                            protect             : protect enable 
  ** Function Return      : CONFIG_SUCCESS      : Config success
							CONFIG_FAILED       : Config failed
  ** Notes				  : None
*/
u8 Dps_Config(Dps_Arg * dps_cfg, Sample_Data * Sample, u8 protect)
{
	TickType_t x1ms = pdMS_TO_TICKS(1);
	u8 id = 0x00;
	u16 BufData= 0x00;

	/* Config DPS board0 channel A~F */
	/* Debug . DPS1 Short circuit*/
	for (id = DPSB_CHANNEL; id <= DPSF_CHANNEL; id++) {	
	// for (id = DPSA_CHANNEL; id <= DPSF_CHANNEL; id++) {
		if (SUCCESS != Isl8272_Config(id, dps_cfg, protect, DPS_BD0)) {
			if (protect) {
				Sample->AgeStatus = ERROR_PROTECT;
				Sample->ErrStatus = DPS1_SET_ERR << id;
				return CONFIG_FAILED;
			}
			else {

			}
		}
	}

	/* Config DPS board1 channel A~F */
	for (id = DPSA_CHANNEL; id <= DPSF_CHANNEL; id++) {
		if (SUCCESS != Isl8272_Config(id, dps_cfg, protect, DPS_BD1)) {
			if (protect) {
				Sample->AgeStatus = ERROR_PROTECT;
				Sample->ErrStatus = DPS9_SET_ERR << id;
				/* De_bug No Board 1 */
//				return CONFIG_FAILED;
			}
			else {

			}
		}
	}

	for (id = DPSA_CHANNEL; id <= DPS2_CHANNEL; id++) {
		/* Ready register data . MSB */
		BufData = dps_cfg->Dsp[id].Open.STime;
		/* Write DPS FPGA register data : CHA_ON_DELAY_REG + Ch */
		if (CONFIG_SUCCESS != Config_Dps_Fpga_Reg(CHA_ON_DELAY_REG + id, BufData, DPS_BD0)) {
			if (protect) {
				Sample->AgeStatus = ERROR_PROTECT;
				Sample->ErrStatus = DPS1_SET_ERR << id;
				return CONFIG_FAILED;				
			}
		}
		else {

		}

		/* Ready register data . MSB */
		BufData = dps_cfg->Dsp[id].Close.STime;
		/* Write DPS FPGA register data : CHA_OFF_DELAY_REG + Ch */
		if (CONFIG_SUCCESS != Config_Dps_Fpga_Reg(CHA_OFF_DELAY_REG + id, BufData, DPS_BD0)) {
			if (protect) {
				Sample->AgeStatus = ERROR_PROTECT;
				Sample->ErrStatus = DPS1_SET_ERR << id;
				return CONFIG_FAILED;
			}
		}
		else {

		}
	}

	for (id = DPSA_CHANNEL; id <= DPS2_CHANNEL; id++) {
		/* Ready register data . MSB */
		BufData = dps_cfg->Dsp[id].Open.STime;
		/* Write DPS FPGA register data : CHA_ON_DELAY_REG + Ch */
		if (CONFIG_SUCCESS != Config_Dps_Fpga_Reg(CHA_ON_DELAY_REG + id, BufData, DPS_BD1)) {
			if (protect) {
				Sample->AgeStatus = ERROR_PROTECT;
				Sample->ErrStatus = DPS9_SET_ERR << id;
				// return CONFIG_FAILED;				
			}
		}
		else {

		}

		/* Ready register data . MSB */
		BufData = dps_cfg->Dsp[id].Close.STime;
		/* Write DPS FPGA register data : CHA_OFF_DELAY_REG + Ch */
		if (CONFIG_SUCCESS != Config_Dps_Fpga_Reg(CHA_OFF_DELAY_REG + id, BufData, DPS_BD1)) {
			if (protect) {
				Sample->AgeStatus = ERROR_PROTECT;
				Sample->ErrStatus = DPS9_SET_ERR << id;
				// return CONFIG_FAILED;
			}
		}
		else {

		}
	}

	/* Enable DPS board0 level 3 */
	if (SET_SUCCESS != Set_All_Dps_L3_Enable(L3_ALL_ENABLE, DPS_BD0)) {
		if (protect) {
			return CONFIG_FAILED;
		}
		else {

		}
	}
	/* Enable DPS board1 level 3 */
	if (SET_SUCCESS != Set_All_Dps_L3_Enable(L3_ALL_ENABLE, DPS_BD1)) {
		if (protect) {
				/* De_bug No Board 1 */
//				return CONFIG_FAILED;
		}
		else {

		}
	}
	vTaskDelay(x1ms);

	/* Enable DPS board0 level 2 */
	if (SET_SUCCESS != Set_All_Dps_L2_Enable(L2_ALL_ENABLE, DPS_BD0)) {
		if (protect) {
			return CONFIG_FAILED;
		}
		else {

		}
	}
	/* Enable DPS board1 level 2 */	
	if (SET_SUCCESS != Set_All_Dps_L2_Enable(L2_ALL_ENABLE, DPS_BD1)) {
		if (protect) {
				/* De_bug No Board 1 */
//				return CONFIG_FAILED;
		}
		else {

		}
	}
	vTaskDelay(x1ms);

	/* Task Function */
    xTaskCreate(AD5694_Ch0_Set_Line_Power_On_Task,\
    		/* Task Name */
    		( const char * )"AD5694 Ch0 Set Line Power On",\
			/* Task Stack Size */
			THREAD_STACKSIZE,	
			/* Task Parameter */
			(void *)dps_cfg,\
			/* Task Priority */
			DEFAULT_THREAD_PRIO + 4,\
			/* Task Handler */
			&Power_bd0_ch0_on_t);

	// /* Task Function */
	// xTaskCreate(AD5694_Ch1_Set_Line_Power_On_Task,\
	// 	/* Task Name */
	// 	( const char * )"AD5694 Ch1 Set Line Power On",\
	// 	/* Task Stack Size */
	// 	THREAD_STACKSIZE,
	// 	/* Task Parameter */
	// 	(void *)dps_cfg,\
	// 	/* Task Priority */
	// 	DEFAULT_THREAD_PRIO + 4,\
	// 	/* Task Handler */
	// 	&Power_bd0_ch1_on_t);

	// /* Task Function */
	// xTaskCreate(AD5694_Ch1_Set_Line_Power_On_Task,\
	// 	/* Task Name */
	// 	( const char * )"AD5694 Ch1 Set Line Power On",\
	// 	/* Task Stack Size */
	// 	THREAD_STACKSIZE,
	// 	/* Task Parameter */
	// 	(void *)dps_cfg,\
	// 	/* Task Priority */
	// 	DEFAULT_THREAD_PRIO + 4,\
	// 	/* Task Handler */
	// 	&Power_bd1_ch0_on_t);	

	// /* Task Function */
	// xTaskCreate(AD5694_Ch1_Set_Line_Power_On_Task,\
	// 	/* Task Name */
	// 	( const char * )"AD5694 Ch1 Set Line Power On",\
	// 	/* Task Stack Size */
	// 	THREAD_STACKSIZE,
	// 	/* Task Parameter */
	// 	(void *)dps_cfg,\
	// 	/* Task Priority */
	// 	DEFAULT_THREAD_PRIO + 4,\
	// 	/* Task Handler */
	// 	&Power_bd1_ch1_on_t);			
		
	return CONFIG_SUCCESS;
}


/*
  ** Function Name        : Dps_Check_Error
  ** Function Description : Start dps channel error cheek
  ** Function Parameter   : dps_cfg             : DPS config parameter
  ** Function Return      : SET_SUCCESS         : Disable success
							SET_FAILED          : Disable failed
  ** Notes				  : None
*/
u8 Dps_Check_Error(Dps_Arg * dps_cfg)
{
	TickType_t x1ms = pdMS_TO_TICKS(1);
	u32 delay_time = 

//	/* Disable DPS board0 level 2 */
//	if (SET_SUCCESS != Set_All_Dps_L2_Enable(ALL_DISABLE, DPS_BD0)) {
//		return SET_FAILED;
//	}
//	/* Disable DPS board1 level 2 */
//	if (SET_SUCCESS != Set_All_Dps_L2_Enable(ALL_DISABLE, DPS_BD1)) {
//		/* De_bug No Board 1 */
//		// return SET_FAILED;
//	}
//	vTaskDelay(x1ms * 700);
//
//	/* Disable DPS board0 level 3 */
//	if (SET_SUCCESS != Set_All_Dps_L3_Enable(ALL_DISABLE, DPS_BD0)) {
//		return SET_FAILED;
//	}
//	/* Disable DPS board1 level 3 */
//	if (SET_SUCCESS != Set_All_Dps_L3_Enable(ALL_DISABLE, DPS_BD1)) {
//	    /* De_bug No Board 1 */
//		// return SET_FAILED;
//	}
//	vTaskDelay(x1ms);
//
//	/* Disable DPS board0 ADC Channel1 and Channel2 */
//	if (SUCCESS != Disable_DPS_CH1_CH2(DPS_BD0))  {
//		return SET_FAILED;
//	}
//	vTaskDelay(x1ms);
//
//	/* Disable DPS board1 ADC Channel1 and Channel2 */
//	if (SUCCESS != Disable_DPS_CH1_CH2(DPS_BD1))  {
//		// return SET_FAILED;
//	}
//	vTaskDelay(x1ms);

//	return SET_SUCCESS;

}


/*
  ** Function Name        : Get_Max_Delay
  ** Function Description : Get max delay time
  ** Function Parameter   : dps_cfg             : DPS config parameter
  ** Function Return      : GET_SUCCESS         : Disable success
							GET_FAILED          : Disable failed
  ** Notes				  : None
*/
u8 Get_Max_Delay(Dps_Arg * dps_cfg, u32 * Delay)
{
	u32 delay = 0x00;
	u8 count = 0x00;

//	u32 = dps_cfg->Dsp[0].Open.Keep;
//	for (count = 0; count < ; count++) {
//
//	}


	* Delay = delay;

	return GET_SUCCESS;
}

/*

  ** Function Name        : Dps_Disabl
  e
  ** Function Description : Disable Dps Dpm system
  ** Function Parameter   : void
  ** Function Return      : SET_SUCCESS         : Disable success
							SET_FAILED          : Disable failed
  ** Notes				  : None
*/
u8 Dps_Disable(void)
{
	TickType_t x1ms = pdMS_TO_TICKS(1);

	/* Disable DPS board0 level 2 */
	if (SET_SUCCESS != Set_All_Dps_L2_Enable(ALL_DISABLE, DPS_BD0)) {
		return SET_FAILED;
	}
	/* Disable DPS board1 level 2 */	
	if (SET_SUCCESS != Set_All_Dps_L2_Enable(ALL_DISABLE, DPS_BD1)) {
		/* De_bug No Board 1 */		
		// return SET_FAILED;
	}

	// 	/* Task Function */
    // xTaskCreate(AD5694_Ch0_Set_Line_Power_Off_Task,\
    // 		/* Task Name */
    // 		( const char * )"AD5694 Ch0 Set Line Power On",\
	// 		/* Task Stack Size */
	// 		THREAD_STACKSIZE,	
	// 		/* Task Parameter */
	// 		(void *)dps_cfg,\
	// 		/* Task Priority */
	// 		DEFAULT_THREAD_PRIO + 4,\
	// 		/* Task Handler */
	// 		&Power_ch0_on_t);

	// /* Task Function */
	// xTaskCreate(AD5694_Ch1_Set_Line_Power_Off_Task,\
	// 	/* Task Name */
	// 	( const char * )"AD5694 Ch1 Set Line Power On",\
	// 	/* Task Stack Size */
	// 	THREAD_STACKSIZE,
	// 	/* Task Parameter */
	// 	(void *)dps_cfg,\
	// 	/* Task Priority */
	// 	DEFAULT_THREAD_PRIO + 4,\
	// 	/* Task Handler */
	// 	&Power_ch1_on_t);

	/* Disable DPS board0 level 3 */
	if (SET_SUCCESS != Set_All_Dps_L3_Enable(ALL_DISABLE, DPS_BD0)) {
		return SET_FAILED;
	}
	/* Disable DPS board1 level 3 */
	if (SET_SUCCESS != Set_All_Dps_L3_Enable(ALL_DISABLE, DPS_BD1)) {
	    /* De_bug No Board 1 */
		// return SET_FAILED;
	}
	vTaskDelay(x1ms);

	/* Disable DPS board0 ADC Channel1 and Channel2 */
	if (SUCCESS != Disable_DPS_CH1_CH2(DPS_BD0))  {
		return SET_FAILED;
	}
	vTaskDelay(x1ms);

	/* Disable DPS board1 ADC Channel1 and Channel2 */
	if (SUCCESS != Disable_DPS_CH1_CH2(DPS_BD1))  {
		// return SET_FAILED;
	}
	vTaskDelay(x1ms);

	return SET_SUCCESS;
}

//u8 Dps_Protect()
//{
//
//
//}
/*
  ** Function Name        : Dps_Info_Clear
  ** Function Description : Clear dps information 
  ** Function Parameter   : Sample              : Aging sample data
  ** Function Return      : CLEAR_SUCCESS       : Clear success
							CLEAR_FAILED        : Clear failed
  ** Notes				  : None
*/
u8 Dps_Info_Clear(Sample_Data * Sample)
{
	u8 i = 0;

	for ( i = 0; i < 16; i ++) {
		Sample->DpsVO[i] = 0x00;
		Sample->DpsIO[i] = 0x00;
		Sample->ErrStatus = 0x00;
		Sample->TempSamp[i] = 0x00;
	}

	return CLEAR_SUCCESS;
}


/*
  ** (C) COPYRIGHT ChengDuHangke END OF FILE
*/
